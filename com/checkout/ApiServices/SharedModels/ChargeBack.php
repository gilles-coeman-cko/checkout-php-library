<?php

/**
 * Checkout.com Apiservices\Sharedmodels\Chargeback.
 *
 * PHP Version 5.6
 *
 * @category Api Services
 * @package Checkoutapi
 * @license https://checkout.com/terms/ MIT License
 * @link https://www.checkout.com/
 */

namespace com\checkout\Apiservices\Sharedmodels;

/**
 * Class Charge Back.
 *
 * @category Api Services
 * @version Release: @package_version@
 */
class Chargeback extends \com\checkout\Apiservices\Sharedmodels\Basehttp {

  protected $object;
  protected $id;
  protected $chargeId;
  protected $scheme;
  protected $value;
  protected $currency;
  protected $trackId;
  protected $issueDate;
  protected $cardNumber;
  protected $indicator;
  protected $reasonCode;
  protected $arn;
  protected $customerName;
  protected $customerEmail;

  /**
   * Get an object.
   *
   * @return mixed
   *   The object.
   */
  public function getObject() {
    return $this->object;
  }

  /**
   * Get the string that uniquely identifies the transaction.
   *
   * Note: The card id is prefixed with charge_.
   *
   * @return mixed
   *   The chargeId.
   */
  public function getId() {
    return $this->id;
  }

  /**
   * Get the string that uniquely identifies the transaction.
   *
   * Note: The card id is prefixed with charge_.
   *
   * @return mixed
   *   The chargeId.
   */
  public function getChargeId() {
    return $this->chargeId;
  }

  /**
   * Get the card scheme.
   *
   * ie. Visa, MasterCard, etc.
   *
   * @return mixed
   *   The scheme.
   */
  public function getScheme() {
    return $this->scheme;
  }

  /**
   * Get the value of the transaction.
   *
   * A non-zero positive integer (i.e. decimal figures not allowed).
   * For most currencies, value is divided into 100 units
   * (e.g. "value = 100" is equivalent to 1 US Dollar).
   *
   * @return mixed
   *   The value.
   */
  public function getValue() {
    return $this->value;
  }

  /**
   * Get the Three-letter ISO currency code.
   *
   * This code is representing the currency in
   * which the recurring charge will be made.
   *
   * @return mixed
   *   The currency.
   */
  public function getCurrency() {
    return $this->currency;
  }

  /**
   * Get a track id.
   *
   * Order tracking id generated by the merchant. Max length 50 characters.
   *
   * @return mixed
   *   The trackId.
   */
  public function getTrackId() {
    return $this->trackId;
  }

  /**
   * Get the issue date as UTC date and time based on ISO 8601 profile.
   *
   * @return mixed
   *   The issueDate.
   */
  public function getIssueDate() {
    return $this->issueDate;
  }

  /**
   * Get the string containing the card's number.
   *
   * @return mixed
   *   The cardNumber.
   */
  public function getCardNumber() {
    return $this->cardNumber;
  }

  /**
   * Get the string indicator.
   *
   * @return mixed
   *   The indicator.
   */
  public function getIndicator() {
    return $this->indicator;
  }

  /**
   * Get the reason code.
   *
   * @return mixed
   *   The reasonCode.
   */
  public function getReasonCode() {
    return $this->reasonCode;
  }

  /**
   * Get the acquirer reference number.
   *
   * @return mixed
   *   The arn.
   */
  public function getArn() {
    return $this->arn;
  }

  /**
   * Get the customer name.
   *
   * @return mixed
   *   The customerName.
   */
  public function getCustomerName() {
    return $this->customerName;
  }

  /**
   * Get the email address of the customer.
   *
   * @return mixed
   *   The customerEmail.
   */
  public function getCustomerEmail() {
    return $this->customerEmail;
  }

  /**
   * Set an object.
   *
   * @param int $object
   *   The object.
   */
  public function setObject($object) {
    $this->object = $object;
  }

  /**
   * Set the string that uniquely identifies the transaction.
   *
   * Note: The card id is prefixed with charge_.
   *
   * @param mixed $id
   *   The chargeId.
   */
  public function setId($id) {
    $this->id = $id;
  }

  /**
   * Set the string that uniquely identifies the transaction.
   *
   * Note: The card id is prefixed with charge_.
   *
   * @param mixed $id
   *   The chargeId.
   */
  public function setChargeId($chargeId) {
    $this->chargeId = $chargeId;
  }

  /**
   * Set the card scheme.
   *
   * ie. Visa, MasterCard, etc.
   *
   * @param mixed $scheme
   *   The scheme.
   */
  public function setScheme($scheme) {
    $this->scheme = $scheme;
  }

  /**
   * Set the value of the transaction.
   *
   * A non-zero positive integer (i.e. decimal figures not allowed).
   * For most currencies, value is divided into 100 units
   * (e.g. "value = 100" is equivalent to 1 US Dollar).
   *
   * @param mixed $value
   *   The value.
   */
  public function setValue($value) {
    $this->value = $value;
  }

  /**
   * Set the Three-letter ISO currency code.
   *
   * This code is representing the currency in
   * which the recurring charge will be made.
   *
   * @param mixed $currency
   *   The currency.
   */
  public function setCurrency($currency) {
    $this->currency = $currency;
  }

  /**
   * Set a track id.
   *
   * Order tracking id generated by the merchant. Max length 50 characters.
   *
   * @param mixed $trackId
   *   The trackId.
   */
  public function setTrackId($trackId) {
    $this->trackId = $trackId;
  }

  /**
   * Set the issue date as UTC date and time based on ISO 8601 profile.
   *
   * @param mixed $issueDate
   *   The issueDate.
   */
  public function setIssueDate($issueDate) {
    $this->issueDate = $issueDate;
  }

  /**
   * Set the string containing the card's number.
   *
   * @param mixed $cardNumber
   *   The cardNumber.
   */
  public function setCardNumber($cardNumber) {
    $this->cardNumber = $cardNumber;
  }

  /**
   * Set the string indicator.
   *
   * @param mixed $indicator
   *   The indicator.
   */
  public function setIndicator($indicator) {
    $this->indicator = $indicator;
  }

  /**
   * Set the reason code.
   *
   * @return mixed $reasonCode
   *   The reasonCode.
   */
  public function setReasonCode($reasonCode) {
    $this->reasonCode = $reasonCode;
  }

  /**
   * Set the acquirer reference number.
   *
   * @param mixed $arn
   *   The arn.
   */
  public function setArn($arn) {
    $this->arn = $arn;
  }

  /**
   * Set the customer name.
   *
   * @param mixed $customerName
   *   The customerName.
   */
  public function setCustomerName($customerName) {
    $this->customerName = $customerName;
  }

  /**
   * Set the email address of the customer.
   *
   * @param mixed $customerEmail
   *   The customerEmail.
   */
  public function setCustomerEmail($customerEmail) {
    $this->customerEmail = $customerEmail;
  }

  /**
   * Set the response Code indicating the status of the request.
   *
   * @param mixed $responseCode
   *   The responseCode.
   */
  public function setResponseCode($responseCode) {
    $this->responseCode = $responseCode;
  }

}
